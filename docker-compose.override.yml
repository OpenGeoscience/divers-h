services:
  django:
    build:
      context: .
      dockerfile: ./dev/kwiver.Dockerfile
    entrypoint: ["python3.10"]
    command: [ "./manage.py", "runserver", "0.0.0.0:8000" ]
    # Log printing via Rich is enhanced by a TTY
    tty: true
    env_file: ./dev/.env.docker-compose
    volumes:
      - .:/opt/uvdat-server
    ports:
      - 8000:8000
    depends_on:
      - postgres
      - rabbitmq
      - minio
    platform: 'linux/amd64'

  celery:
    build:
      context: .
      dockerfile: ./dev/kwiver.Dockerfile
    entrypoint: ["python3.10" , "-m"]
    command:
      [
        "celery",
        "--app",
        "uvdat.celery",
        "worker",
        "--loglevel",
        "INFO",
        "--without-heartbeat"
      ]
    # Docker Compose does not set the TTY width, which causes Celery errors
    tty: false
    env_file: ./dev/.env.docker-compose
    volumes:
      - .:/opt/uvdat-server
    depends_on:
      - postgres
      - rabbitmq
      - minio
    platform: linux/amd64

  docs:
    image: minidocks/mkdocs
    working_dir: /docs
    volumes:
      - ./:/docs
    command: 'serve -a 0.0.0.0:8000 -f ./mkdocs.dev.yml'
    ports:
      - 8003:8000


  client:
    image: node:20
    working_dir: /app
    command: >
      sh -c "
        npm install &&
        # If node_modules is not writable by others, make it so the host can modify and delete them
        [ \"\$(stat -c '%A' node_modules | cut -c9)\" != 'w' ] && chmod o+w node_modules;
        # Always run the dev server
        npm run dev
      "
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
    env_file:
      - ./dev/.env.docker-compose

volumes:
  vector-workdir:
